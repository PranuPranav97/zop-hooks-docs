"use strict";(self.webpackChunkzop_hooks_docs=self.webpackChunkzop_hooks_docs||[]).push([[3814],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),l=p(n),m=o,d=l["".concat(c,".").concat(m)]||l[m]||h[m]||s;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[l]="string"==typeof e?e:o,i[1]=a;for(var p=2;p<s;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2264:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const s={custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},i=void 0,a={unversionedId:"Hooks/useScreenBrightness",id:"Hooks/useScreenBrightness",isDocsHomePage:!1,title:"useScreenBrightness",description:"useScreenBrightness",source:"@site/docs/Hooks/useScreenBrightness.md",sourceDirName:"Hooks",slug:"/Hooks/useScreenBrightness",permalink:"/zop-hooks-docs/docs/Hooks/useScreenBrightness",editUrl:"https://github.com/PranuPranav97/zop-hooks-docs",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},sidebar:"tutorialSidebar",previous:{title:"usePageTimer",permalink:"/zop-hooks-docs/docs/Hooks/usePageTimer"},next:{title:"useScreenOrientation",permalink:"/zop-hooks-docs/docs/Hooks/useScreenOrientation"}},c=[{value:"useScreenBrightness",id:"usescreenbrightness",children:[{value:"Usage",id:"usage",children:[]},{value:"Example",id:"example",children:[]}]}],p={toc:c},u="wrapper";function l(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"usescreenbrightness"},"useScreenBrightness"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook is a custom React hook that allows you to get the current screen brightness of a device. It utilizes the ",(0,o.kt)("inlineCode",{parentName:"p"},"window.screen")," API and the devicelight event to provide the brightness value."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"To use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook, follow these steps:"),(0,o.kt)("p",null,"Import the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook in your React component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useScreenBrightness } from "zop-hooks";\n')),(0,o.kt)("p",null,"Call the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook within your functional component to retrieve the screen brightness value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"const brightness = useScreenBrightness();\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"brightness")," variable will hold the current screen brightness value."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"Here's an example of how you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook in a React component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import React from "react";\nimport { useScreenBrightness } from "./useScreenBrightness";\n\nfunction MyComponent() {\n  const brightness = useScreenBrightness();\n\n  return (\n    <div>\n      <p>Screen Brightness: {brightness}</p>\n    </div>\n  );\n}\n')),(0,o.kt)("p",null,"In the example above, the ",(0,o.kt)("inlineCode",{parentName:"p"},"MyComponent")," functional component uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"useScreenBrightness")," hook to retrieve the screen brightness value. The brightness value is then displayed in the component's output."))}l.isMDXComponent=!0}}]);