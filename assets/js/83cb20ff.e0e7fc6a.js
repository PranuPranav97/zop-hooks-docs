"use strict";(self.webpackChunkzop_hooks_docs=self.webpackChunkzop_hooks_docs||[]).push([[483],{8383:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2,custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},s="useTimer",a={unversionedId:"Hooks/useTimer",id:"Hooks/useTimer",isDocsHomePage:!1,title:"useTimer",description:"useTimer Hook",source:"@site/docs/Hooks/useTimer.md",sourceDirName:"Hooks",slug:"/Hooks/useTimer",permalink:"/zop-hooks-docs/docs/Hooks/useTimer",editUrl:"https://github.com/PranuPranav97/zop-hooks-docs",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},sidebar:"tutorialSidebar",previous:{title:"useClipboard",permalink:"/zop-hooks-docs/docs/Hooks/useClipboard"},next:{title:"useDeviceType",permalink:"/zop-hooks-docs/docs/Hooks/useDeviceType"}},u=[{value:"1.Import the Hook",id:"1import-the-hook",children:[]},{value:"2.Initialize the timer by calling the useTimer hook:",id:"2initialize-the-timer-by-calling-the-usetimer-hook",children:[]},{value:"3.Use the timer properties and methods in your component:",id:"3use-the-timer-properties-and-methods-in-your-component",children:[]},{value:"4.Render the timer and buttons in your component&#39;s JSX:",id:"4render-the-timer-and-buttons-in-your-components-jsx",children:[]},{value:"API",id:"api",children:[]},{value:"Example",id:"example",children:[]}],m={toc:u},p="wrapper";function l(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"usetimer"},"useTimer"),(0,r.kt)("p",null,"useTimer Hook\nThe useTimer hook is a custom React hook that provides a timer functionality. It allows you to start, pause, reset, and retrieve the current state and time of the timer."),(0,r.kt)("h3",{id:"1import-the-hook"},"1.Import the Hook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import useTimer from "zop-hooks";\n')),(0,r.kt)("h3",{id:"2initialize-the-timer-by-calling-the-usetimer-hook"},"2.Initialize the timer by calling the useTimer hook:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const timer = useTimer();\n")),(0,r.kt)("h3",{id:"3use-the-timer-properties-and-methods-in-your-component"},"3.Use the timer properties and methods in your component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// Access the current time and state of the timer\nconst currentTime = timer.time;\nconst currentTimerState = timer.state;\n\n// Start the timer\nconst handleStart = () => {\n  timer.start();\n};\n\n// Pause the timer\nconst handlePause = () => {\n  timer.pause();\n};\n\n// Reset the timer\nconst handleReset = () => {\n  timer.reset();\n};\n")),(0,r.kt)("h3",{id:"4render-the-timer-and-buttons-in-your-components-jsx"},"4.Render the timer and buttons in your component's JSX:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"return (\n  <div>\n    <p>Time: {currentTime}</p>\n    <p>State: {currentTimerState}</p>\n    <button onClick={handleStart}>Start</button>\n    <button onClick={handlePause}>Pause</button>\n    <button onClick={handleReset}>Reset</button>\n  </div>\n);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("p",null,"The useTimer hook returns an object with the following properties and methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"time: number - The current time of the timer."),(0,r.kt)("li",{parentName:"ul"},'state: TimerState - The current state of the timer. Possible values are "idle", "running", or "paused".'),(0,r.kt)("li",{parentName:"ul"},"start: () => void - A function to start the timer."),(0,r.kt)("li",{parentName:"ul"},"pause: () => void - A function to pause the timer."),(0,r.kt)("li",{parentName:"ul"},"reset: () => void - A function to reset the timer.")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Here's a complete example of using the useTimer hook in a React component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import React from "react";\nimport useTimer from "<path-to-useTimer>";\n\nconst TimerComponent = () => {\n  const timer = useTimer();\n\n  const currentTime = timer.time;\n  const currentTimerState = timer.state;\n\n  const handleStart = () => {\n    timer.start();\n  };\n\n  const handlePause = () => {\n    timer.pause();\n  };\n\n  const handleReset = () => {\n    timer.reset();\n  };\n\n  return (\n    <div>\n      <p>Time: {currentTime}</p>\n      <p>State: {currentTimerState}</p>\n      <button onClick={handleStart}>Start</button>\n      <button onClick={handlePause}>Pause</button>\n      <button onClick={handleReset}>Reset</button>\n    </div>\n  );\n};\n\nexport default TimerComponent;\n')),(0,r.kt)("p",null,"That's it! You can now use the useTimer hook in your project to add timer functionality to your components."))}l.isMDXComponent=!0}}]);