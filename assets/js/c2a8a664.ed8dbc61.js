"use strict";(self.webpackChunkzop_hooks_docs=self.webpackChunkzop_hooks_docs||[]).push([[2371],{3905:(e,n,o)=>{o.d(n,{Zo:()=>u,kt:()=>m});var t=o(7294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var a=t.createContext({}),c=function(e){var n=t.useContext(a),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},u=function(e){var n=c(e.components);return t.createElement(a.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,l=e.originalType,a=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(o),h=r,m=p["".concat(a,".").concat(h)]||p[h]||d[h]||l;return o?t.createElement(m,i(i({ref:n},u),{},{components:o})):t.createElement(m,i({ref:n},u))}));function m(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=o.length,i=new Array(l);i[0]=h;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=o[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}h.displayName="MDXCreateElement"},2949:(e,n,o)=>{o.r(n),o.d(n,{contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>a});var t=o(7462),r=(o(7294),o(3905));const l={custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},i=void 0,s={unversionedId:"Hooks/useWindowScroll",id:"Hooks/useWindowScroll",isDocsHomePage:!1,title:"useWindowScroll",description:"useWindowScroll",source:"@site/docs/Hooks/useWindowScroll.md",sourceDirName:"Hooks",slug:"/Hooks/useWindowScroll",permalink:"/zop-hooks-docs/docs/Hooks/useWindowScroll",editUrl:"https://github.com/PranuPranav97/zop-hooks-docs",tags:[],version:"current",frontMatter:{custom_edit_url:"https://github.com/PranuPranav97/zop-hooks-docs"},sidebar:"tutorialSidebar",previous:{title:"useScrollPosition",permalink:"/zop-hooks-docs/docs/Hooks/useScrollPosition"}},a=[{value:"useWindowScroll",id:"usewindowscroll",children:[{value:"Usage",id:"usage",children:[]},{value:"Return Value",id:"return-value",children:[]},{value:"Example",id:"example",children:[]},{value:"Notes",id:"notes",children:[]}]}],c={toc:a},u="wrapper";function p(e){let{components:n,...o}=e;return(0,r.kt)(u,(0,t.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"usewindowscroll"},"useWindowScroll"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook is a custom React hook that allows you to get the current vertical scroll position of the window. It provides the scroll position as a single value (",(0,r.kt)("inlineCode",{parentName:"p"},"scrollY"),") and updates it whenever the window is scrolled."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useState, useEffect } from "react";\n\nfunction useWindowScroll() {\n  const [scrollY, setScrollY] = useState(0);\n\n  useEffect(() => {\n    function handleWindowScroll() {\n      setScrollY(window.scrollY);\n    }\n\n    window.addEventListener("scroll", handleWindowScroll);\n\n    return () => {\n      window.removeEventListener("scroll", handleWindowScroll);\n    };\n  }, []);\n\n  return scrollY;\n}\n\nexport { useWindowScroll };\n')),(0,r.kt)("p",null,"To use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook, follow these steps:"),(0,r.kt)("p",null,"Import the hook and any other necessary dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useWindowScroll } from "zop-hooks";\n')),(0,r.kt)("p",null,"Invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook within a functional component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"function MyComponent() {\n  const scrollY = useWindowScroll();\n\n  // Access the scroll position value\n  // scrollY represents the vertical scroll position\n\n  // Rest of your component code\n  // ...\n}\n")),(0,r.kt)("h3",{id:"return-value"},"Return Value"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook returns the current vertical scroll position (",(0,r.kt)("inlineCode",{parentName:"p"},"scrollY"),") as a number."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Here's an example of how you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook in a functional component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { useWindowScroll } from "./path/to/useWindowScroll";\n\nfunction MyComponent() {\n  const scrollY = useWindowScroll();\n\n  return (\n    <div>\n      <p>Scroll Y: {scrollY}px</p>\n    </div>\n  );\n}\n')),(0,r.kt)("p",null,"In this example, the component displays the current vertical scroll position of the window in pixels."),(0,r.kt)("h3",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"useWindowScroll")," hook uses the ",(0,r.kt)("inlineCode",{parentName:"li"},"useState")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"useEffect")," hooks from React to manage state and perform side effects, respectively."),(0,r.kt)("li",{parentName:"ul"},"The initial scroll position is obtained when the hook is first invoked, but subsequent updates are triggered only when the window is scrolled. This optimization helps reduce unnecessary re-renders."),(0,r.kt)("li",{parentName:"ul"},"The event listener for window scroll is added and removed in the ",(0,r.kt)("inlineCode",{parentName:"li"},"useEffect")," hook's cleanup function to ensure proper handling of the event.")),(0,r.kt)("p",null,"Remember to include the necessary import statements and adjust the file paths accordingly when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook in your project."),(0,r.kt)("p",null,"That's it! You can now utilize the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWindowScroll")," hook to get the current vertical scroll position of the window in your React components."))}p.isMDXComponent=!0}}]);